==============Content================
과제 5-1을 하고있는데요, 명세를 보면

"프로세스가 가상 메모리 주소에 접근할 때 자신의 페이지 테이블로 접근하여 실제 메모리 주소로 변경하는 중 해당 페이지가 페이지 테이블에 실제 주소로 맵핑되어 있는 정보가 없는 경우 발생"

여기서 
1. 프로세스가 가상메모리 주소에 접근하는 방법과 시기,
2. 실제 메모리 주소로 변경할 때 페이지가 페이지 테이블에 실제 주소로 맵핑되어 있지 않는 것을 찾아내는 방법

이 두 개에서 막혀서 진행이 안되고 있습니다. 
메모리 사이에서 맵핑되는 과정에 대한 이해와 page fault가 나는 시기에 대한 이해가 부족한것 같은데 어떤 방법으로 접근을 해야하는지 도와주시면 감사드리겠습니다..



==============Comment================
1.

paging이 on인 상태에서, 즉, cr0의 최상위 bit가 1로 셋팅된 상태에서는 모든 메모리 주소를 가상 메모리 주소로 간주합니다. 다시 말해서, 이 상태에서는 cpu에 어떤 메모리 주소를 들이밀고 값을 가져와라 or 넣어라 명령하면, cpu는 곧장 그 주소로 가는게 아니라 사용자가 설정한 page directory, page table을 가지고 추가적으로 메모리 주소를 계산하고, 그 주소로 접근하는 겁니다. 쉽게 말해서, '가상 메모리 주소'(=paging on인 상태에서 cpu에 인가되는 메모리 주소)는 일종의 메모리 주소 계산을 위한 '방정식'이 되는 것이고, cpu는 page directory, page table을 통해 하나씩 실타래를 풀어 실제 목적지 주소를 최종적으로 도출하는 겁니다.

메모리에 접근한다는 말은 (이 과제에서) 변수에 접근하는 것을 말합니다. 예를 들어서, "int a = 10;"와 같은 c언어 문장을 생각해보세요. 일단, int형 변수를 선언했으니 메모리 어딘가에 이 변수를 위한 공간이 잡히겠죠. 그리고, 이 변수에 10을 넣어야 하는데, 어디에 넣나요? cpu가 a라고 하면 알아듣나요? 당연히, 우리가 할당한 메모리 공간의 '주소'를 건네주면서 10을 넣어달라고 부탁해야겠죠. 보신 것처럼, 상희님이 쓰신 거의 모든 c언어 문장이 메모리 접근을 그 토대로 하고 있습니다. 또 다른 예로, "b = a;"와 같은 문장에서는 2개의 메모리 주소가 필요하겠죠. 일단, a의 값을 가져와야 하니까 a의 메모리 주소를 알아야겠구요. 그 값을 b에 넣어야 하니까 b의 메모리 주소도 필요해요. "memset(&a, 0, sizeof(a));"의 경우도, a를 0으로 초기화하는 거니까 a의 주소가 필요한 것은 당연하구요.

정리해서, 어떤 변수에 (1) 값을 쓰거나 (2) 그 값을 가져오는 경우 모두 메모리 주소가 필요하고, 궁극적으로는 메모리 접근이 이루어지는 겁니다. 말씀하신 '가상' 메모리에 접근한다는 얘기는, 'paging이 on인 상태에서' 변수에 값을 쓰거나 변수의 값을 읽어온다는 것을 말해요. 쉽게 말해서, '가상' == 'paging on'을 말한다고 보시면 됩니다. 참고로, (이 과제에 한정해서) palloc_get_multiple()에서 할당할 메모리 공간을 확정하고, 이를 반환하기 전 초기화하면서 page fault가 발생하도록 설계돼있습니다. 즉, memset()으로 할당할 메모리 공간을 0으로 초기화하는 과정에서, 즉, (1) pages에 0을 "쓰는" 과정에서 메모리가 mapping 돼있지 않으면 page fault가 발생하는 겁니다.

2.

맵핑돼있지 않을때 page fault가 발생하는 겁니다...?

상세한 답변 감사합니다 많은 도움이되었습니다.

