==============Content================
get_cur_pd() 함수로 uint32_t 포인터형에 현재 page directory의 주소를 저장하여 사용하는데요
pf 핸들러에서 pd[0] 이런 식의 배열 접근이 아예 안됩니다.
init_paging() 함수에선 동일한 방법으로 접근하여 정상적으로 출력이되는데
핸들러에서는 왜 안되는지 모르겠어요.. ㅜㅜ 뭐가 문제일까요..?



==============Comment================
cr3는 physical address를 담고 있습니다.  paging on인 상태에서 (즉, virtual address를 기대하는 상황에서) 이 주소를 사용하면 mapping이 안 돼있어 page fault가 납니다.

답변 감사합니다. 제가 질문드린 것은 page directory index를 구해서 pd[idx] 이런 식으로 page table 주소값을 얻어내야되는데, 이게 전혀 먹질않아서 말씀드린거였어요 ㅜㅜ..

음... 제 말은 그 pd 값이 read_cr3()의 반환 값을 저장한 것 아닌가요?

넵 맞아요

넵... 그러니까 문제가 되는거죠...? physical address잖아요. 인덱스를 사용해봤자 그 주변인데요? 다시 말해서, 하위 12비트만 바뀌는 정도로는 의미가 없구요. 그 이상 바뀌어야 페이지가 바뀌는건데... 사실 그 인근 페이지가 mapping 돼있을 가능성도 전무하구요. 과제에서는 3GB 이후로 매핑하고 있는데 physical address는 2MB 부근에서 놀고 있는 거잖아요. 사실, 3GB 이후도 매핑돼있는게 아니고 page fault 날 때마다 직접 매핑하시는게 과제지만요.

음... 지식이 짧아 이해하기가 어렵네요 ㅜ.. 좀 더 공부해봐야겠습니다. 답변 감사합니다.

방향을 좀 설정해드리자면, paging on/off 여부에 따라 메모리 접근 방식이 달라져요. init_paging()에서 문제가 없었던 이유는 paging off 상태였기 때문이에요. paging off 상태면 page directory/table이고 뭐고 그냥 바로 그 주소로 가서 접근하거든요. 그런데, paging on을 하면 우리가 직접 공식을 알려줘야 돼요. cpu가 바로 접근하지 않고 우리가 설정한 공식에 의해 physical address를 추가로 계산해서 가도록 하는거예요.  그 기준이 되는 것이 page directory, table이구요.  cr3에 page directory를 준비해서 넣어주고, cr0로 paging on 해주면 그 때부터 우리가 설계한 대로 physical address가 계산되는 거죠. 단, 이번 과제에서는 page directory가 완성되지 않은 상태이기 때문에  page fault가 매번 나는거구요. 그 때마다 page directory/table을 다듬어주는 것 (즉, 일일히 매핑해주는 것)이 과제 내용이에요.

음 그럼 page directory와 table을 mapping 해주려고 할때는 paging을 off 해야하나요? 아니면 3GB이후의 메모리에도 똑같이 초기화를 해줘야되는건가요..? 상세한 답변 감사드립니다!!

사실... 단서는 paging.c에 다 있습니다. 예를 들어서,  memcpy_hard()라던지...?

ㅎㅎㅎ제가 너무 과한 요구를 한것같네요. 충분한 힌트가 됐습니다. 답변 감사드립니다~~

노파심에 말씀드리지만, 3GB 이후 메모리를 미리 초기화하시면 안됩니다. 일일히 page fault가 나도록 놔두시고 그때그때 처리하는 게 과제 내용이라...

저도 막혔다가 도움이 되었습니다. 감사드립니다.

